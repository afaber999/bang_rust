%include "./std.hasm"
%include "./sdl.hasm"

%const RGBA_SIZE = 4
%const PTR_SIZE  = 8

%const SCREEN_WIDTH  = 800
%const SCREEN_HEIGHT = 600
%const SCREEN_FPS    = 60
%const DELAY_MS      = 1000 / SCREEN_FPS

%const EVENT  = byte_array(SDL_Event_size, 0)
%const WINDOW = byte_array(PTR_SIZE, 0)

;; TODO(#298): we need some sort of include path functionality for the file() static memory allocator
%const IMAGE_PIXELS = file("./assets/tsodinW.raw")
%const IMAGE_WIDTH  = 112
%const IMAGE_HEIGHT = 112
%const IMAGE_DEPTH  = 32
%const IMAGE_PTR    = byte_array(PTR_SIZE, 0) 

%const LOGO_WIDTH   = IMAGE_WIDTH
%const LOGO_HEIGHT  = IMAGE_HEIGHT
%const LOGO_SRCRECT = byte_array(SDL_Rect_size, 0)
%const LOGO_DSTRECT = byte_array(SDL_Rect_size, 0)
%const LOGO_SPEED   = 5
%const LOGO_DX      = int32(LOGO_SPEED)
%const LOGO_DY      = int32(LOGO_SPEED)
%const LOGO_COLOR   = 0xFF0000FF

;; ---
;; %const IMAGE = file("./image.bin")

split_colors:
%scope
    swap 1
    %for i from 1 to RGBA_SIZE
        dup 0
        push (i - 1) * 8
        shr
        push 0xFF
        andb
        swap 1
    %end
    drop
    %for i from 1 to RGBA_SIZE
        swap i
    %end
    ret
%end

init_logo:
%scope
    ;; Initialize LOGO_SRCRECT
    %scope
        push Unsigned_Int(LOGO_SRCRECT) + SDL_Rect_x
        push 0
        write32
        
        push Unsigned_Int(LOGO_SRCRECT) + SDL_Rect_y
        push 0
        write32
        
        push Unsigned_Int(LOGO_SRCRECT) + SDL_Rect_w
        push LOGO_WIDTH
        write32
        
        push Unsigned_Int(LOGO_SRCRECT) + SDL_Rect_h
        push LOGO_HEIGHT
        write32
    %end

    ;; Initialize LOGO_DSTRECT
    %scope
        push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_x
        push 100
        write32
    
        push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_y
        push 100
        write32
    
        push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_w
        push LOGO_WIDTH
        write32
    
        push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_h
        push LOGO_HEIGHT
        write32
    %end

    ret
%end

render_logo:
%scope
    swap 1

    dup 0
    push IMAGE_PTR
    read64u
    push LOGO_SRCRECT
    push LOGO_DSTRECT
    native SDL_RenderCopy
    drop

    drop

    ret
%end

update_logo:
%scope
    push WINDOW
    read64u
    native SDL_GetWindowSize

    %scope
        push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_y
        read32i

        dup 1
        push LOGO_HEIGHT
        minusi
        lti

        push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_y
        read32i

        swap 0
        push 0
        gei
        andb

        jmp_if skip
            push LOGO_DY
            read32i
            push -1
            multi
            push LOGO_DY
            swap 1
            write32
        skip:
        drop
    %end

    %scope
        push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_x
        read32i

        dup 1
        push Unsigned_Int(LOGO_WIDTH)
        minusi
        lti

        push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_x
        read32i

        swap 0
        push 0
        gei
        andb

        jmp_if skip
            push LOGO_DX
            read32i
            push -1
            multi
            push LOGO_DX
            swap 1
            write32
        skip:
        drop
    %end

    push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_x

    read32i
    push LOGO_DX
    read32i
    plusi
    push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_x
    swap 1
    write32

    push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_y
    read32i
    push LOGO_DY
    read32i
    plusi
    push Unsigned_Int(LOGO_DSTRECT) + SDL_Rect_y
    swap 1
    write32

    ret
%end

%entry main:
    push SDL_INIT_VIDEO
    native SDL_Init
    drop

    push "Simple SDL Example\0"
    push 0 ;; x
    push 0 ;; y
    push SCREEN_WIDTH
    push SCREEN_HEIGHT
    push SDL_WINDOW_RESIZABLE
    native SDL_CreateWindow

    dup 0
    push WINDOW
    swap 1
    write64

    native SDL_CreateRenderer

    dup 0
    push IMAGE_PIXELS
    push IMAGE_WIDTH
    push IMAGE_HEIGHT
    push IMAGE_DEPTH
    push IMAGE_WIDTH * 4
    push 0x000000FF
    push 0x0000FF00
    push 0x00FF0000
    push 0xFF000000
    native SDL_CreateRGBSurfaceFrom
    native SDL_CreateTextureFromSurface
    push IMAGE_PTR
    swap 1
    write64

    call init_logo

    main_loop:
        loop:
            push EVENT
            native SDL_PollEvent

            push EVENT
            read32u

            push SDL_QUIT
            equ
            jmp_if end

        jmp_if loop

        call update_logo

        ;; SDL_SetRenderDrawColor(renderer, 255, 0, 0, 255);
        dup 0
        push 0xFF181818
        call split_colors
        native SDL_SetRenderDrawColor
        drop

        ;; SDL_RenderClear(renderer);
        dup 0
        native SDL_RenderClear
        drop

        dup 0
        call render_logo

        ;; SDL_RenderPresent(renderer);
        dup 0
        native SDL_RenderPresent

        push DELAY_MS
        native SDL_Delay
    jmp main_loop
    end:
    native SDL_Quit
    halt
